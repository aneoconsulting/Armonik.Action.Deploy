name: "Destroy ArmoniK"
description: "Action to destroy ArmoniK deployment"
inputs:
  type:
    description: 'Type of deployment (either "aws" or "localhost")'
    required: true
  prefix:
    description: "Prefix for the deployment"
    required: false
    default: "armonik-cicd"
  working-directory:
    description: "Working directory (should be the ArmoniK repo root folder)"
    required: false
    default: ${{ github.workspace }}
  parameters-file-path:
    description: "Relative path for the Terraform configuration file, root being the ArmoniK repository. Empty keeps it to the default parameters.tfvars associated with your deployment type"
    required: false
    default: ""

runs:
  using: composite
  steps:
    - id: destroy
      name: Destroy
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        INPUT_TYPE: ${{ inputs.type }}
        INPUT_PREFIX: ${{ inputs.prefix }}
        PARAMETERS_FILE_PATH: ${{ inputs.parameters-file-path }}
      run: |
        set -ex
        if [ -n "$PARAMETERS_FILE_PATH" ]; then
          export PARAMETERS_FILE="$(pwd)/$PARAMETERS_FILE_PATH"
        fi
        cd infrastructure/quick-deploy/
        cd "$INPUT_TYPE"
        make PREFIX="$INPUT_PREFIX" get-modules
        make PREFIX="$INPUT_PREFIX" init
        make PREFIX="$INPUT_PREFIX" output
        EKS_NAME="$(jq -r .eks.name generated/armonik-output.json)"
        EKS_REGION="$(jq -r .eks.region generated/armonik-output.json)"
        [ "$EKS_NAME" != null ] || EKS_NAME=
        [ "$EKS_REGION" != null ] || EKS_REGION=
        if [ -n "$EKS_NAME" -a -n "$EKS_REGION" ]; then
          aws eks update-kubeconfig --region "$EKS_REGION" --name "$EKS_NAME"
          cat ~/.kube/config
        else
          # Ignore the update_kubeconfig if there is no more EKS
          TF_DATA_DIR=generated terraform state rm module.eks.null_resource.update_kubeconfig > /dev/null 2>&1 || true
        fi
        make PREFIX="$INPUT_PREFIX" delete
