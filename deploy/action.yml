name: "Deploy ArmoniK"
description: "Action to deploy ArmoniK"
inputs:
  type:
    description: 'Type of deployment (either "aws" or "localhost")'
    required: true
  core-version:
    description: "Version of core to deploy"
    required: false
    default: ""
  gui-version:
    description: "Version of gui to deploy"
    required: false
    default: ""
  ext-csharp-version:
    description: "Version of Extension Csharp to deploy"
    required: false
    default: ""
  prefix:
    description: "Prefix for the deployment"
    required: false
    default: "armonik-cicd"
  tls:
    description: "Use TLS for ingress"
    required: false
    default: false
  mtls:
    description: "Use mTLS for ingress"
    required: false
    default: false
  generate-client-cert:
    description: "Generate custom client certificates"
    required: false
    default : false
  custom-client-ca:
    description: "Path to custom client certificate authority"
    required: false
    default: ""
  working-directory:
    descriptiont: "Working directory (should be the ArmoniK repo root folder)"
    required: false
    default: $GITHUB_WORKSPACE
outputs:
  terraform-output:
    description: "Terraform output of the deployment"
    value: ${{ steps.apply.outputs.terraform-output }}
runs:
  using: composite
  defaults:
    run:
      working-directory: ${{ inputs.working-directory }}
  steps:
    - id: patch
      name: Patch versions
      shell: bash
      env:
        CORE_VERSION: ${{ inputs.core-version }}
        GUI_VERSION: ${{ inputs.gui-version }}
        EXT_CSHARP_VERSION: ${{ inputs.ext-csharp-version }}
      run: |
        set -ex
        update_version() {
          local component version
          component="$1"
          version="$2"
          if [ -n "$version" ]; then
            jq ".armonik_versions.$component = \"$version\"" versions.tfvars.json > .versions.tfvars.json
            mv .versions.tfvars.json versions.tfvars.json
          fi
        }
        update_version core "$CORE_VERSION"
        update_version gui "$GUI_VERSION"
        update_version extcsharp "$EXT_CSHARP_VERSION"
    - id: options
      name: Patch options
      shell: bash
      env:
        TLS: ${{ inputs.tls }}
        MTLS: ${{ inputs.mtls }}
        GENCERT: ${{ inputs.generate-client-cert }}
        CUSTOM_CA: ${{ inputs.custom-client-ca }}
      run: |
        set -ex
        ingress() {
          local tls mtls gencert custom_ca
          tls="$1"
          mtls="$2"
          gencert="$3"
          custom_ca="$4"
          if [ "$tls" == "true" ]; then
            jq --argjson tls "$tls" --argjson mtls "$mtls" --argjson gencert "$gencert" --arg custom_ca "$custom_ca" '.ingress={tls:$tls, mtls:$mtls, generate_client_cert:$gencert, custom_client_ca_file:$custom_ca}' extra.tfvars.json > .extra.tfvars.json
            mv .extra.tfvars.json extra.tfvars.json
          fi
        }
        ingress "$TLS" "$MTLS" "$GENCERT" "$CUSTOM_CA"
    - id: apply
      name: Apply
      shell: bash
      env:
        INPUT_TYPE: ${{ inputs.type }}
        INPUT_PREFIX: ${{ inputs.prefix }}
      run: |
        set -ex
        cd infrastructure/quick-deploy/
        cd "$INPUT_TYPE"
        [ ! -e all ] || cd all
        make PREFIX="$INPUT_PREFIX" deploy
        {
          echo 'terraform-output<<__GITHUB_EOF__'
          cat generated/armonik-output.json
          echo
          echo __GITHUB_EOF__
        } >> "$GITHUB_OUTPUT"
    - name: Terraform output
      uses: actions/upload-artifact@v3
      with:
        name: terraform-output
        path: |
          infrastructure/quick-deploy/${{ inputs.type }}/generated
          !infrastructure/quick-deploy/${{ inputs.type }}/generated/modules
          !infrastructure/quick-deploy/${{ inputs.type }}/generated/providers
          !infrastructure/quick-deploy/${{ inputs.type }}/generated/.prefix
          infrastructure/quick-deploy/${{ inputs.type }}/all/generated
          !infrastructure/quick-deploy/${{ inputs.type }}/all/generated/modules
          !infrastructure/quick-deploy/${{ inputs.type }}/all/generated/providers
          !infrastructure/quick-deploy/${{ inputs.type }}/all/generated/.prefix
