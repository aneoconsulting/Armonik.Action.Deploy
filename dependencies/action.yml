name: "Install ArmoniK dependencies"
description: "Action to install dependencies required to deploy or use ArmoniK"
inputs:
  aws:
    description: "Install AWS CLI"
    type: boolean
    required: false
    default: false
  docker:
    description: "Install docker"
    type: boolean
    required: false
    default: false
  k3s:
    description: "Install K3s"
    type: boolean
    required: false
    default: false
  terraform:
    description: "Install Terraform"
    type: boolean
    required: false
    default: false
  AWS_ACCESS_KEY_ID:
    required: false
    default: ""
  AWS_SECRET_ACCESS_KEY:
    required: false
    default: ""
  AWS_REGION:
    required: false
    default: ""
  K3S_VERSION:
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Install common dependencies
      shell: bash
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates unzip curl gnupg lsb-release jq python3 python-is-python3 python3-pip
    - if: ${{ inputs.terraform && inputs.terraform != 'false' }}
      name: Install Terraform
      shell: bash
      run: |
        set -ex
        if ! which terraform 2>/dev/null; then
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get install -y terraform
        fi 
    - if: ${{ inputs.aws && inputs.aws != 'false' }}
      name: Install AWS CLI
      shell: bash
      run: |
        set -ex
        if ! which aws 2>/dev/null; then
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          rm -rf aws awscliv2.zip
        fi
    - if: ${{ inputs.docker && inputs.docker != 'false' }}
      name: Install Docker
      shell: bash
      run: |
        set -ex
        if ! which docker 2>/dev/null; then
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          sudo groupadd -f docker
          sudo usermod -aG docker "$USER"
          newgrp docker

          sudo systemctl enable docker.service
          sudo systemctl enable containerd.service
        fi

        docker run hello-world
        
    - if: ${{ inputs.k3s && inputs.k3s != 'false' }}
      name: Install K3s
      shell: bash
      env:
        INSTALL_K3S_VERSION: ${{ inputs.K3S_VERSION }}
      run: |
        set -ex
        curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --docker --write-kubeconfig ~/.kube/config
        sudo chown runner: -R ~/.kube
    - name: Install Kubectl
      shell: bash
      run: |
        set -ex
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
        mkdir -p ~/.kube
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - if: ${{ inputs.aws && inputs.aws != 'false' }}
      name: AWS Config
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
      run: |
        set -ex
        if [ -n "$AWS_ACCESS_KEY_ID" -a -n "$AWS_SECRET_ACCESS_KEY" ]; then
          mkdir -p ~/.aws
          cat > ~/.aws/credentials <<EOF
        [default]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
        EOF
        fi
        if [ -n "$AWS_REGION" ]; then
          mkdir -p ~/.aws
          cat > ~/.aws/config <<EOF
        [default]
        region = $AWS_REGION
        EOF
        fi
